-->"Async/Await in JavaScript":Async/await is a modern way to handle asynchronous operations in JavaScript,
    making asynchronous code easier to write and understand.It was introduced in ES2017 (ES8) and builds on top of Promises.

    1. Basic Concepts:
        ->'async' keyword:Declares an asynchronous function that automatically returns a Promise.
        ->'await' keyword:Pauses the execution of an async function until a Promise is resolved.

    2. Async Functions:
        ->Any function can be made async by adding the 'async' keyword.
        ->Example:
            async function getData()
            {
                return "Hello World";
            }
            //This is equivalent to:
            function getData()
            {
                return Promise.resolve("Hello World");
            }

    3. Await Operator:
        ->Can only be used inside async functions.
        ->Waits for a Promise to resolve and returns its result.
        ->Makes asynchronous code look synchronous.

        ->Basic Example:
            async function fetchUserData()
            {
                try
                {
                    const response = await fetch('https://api.example.com/user');
                    const data = await response.json();
                    return data;
                }catch(error)
                {
                    console.error('Error:', error);
                }
            }

    4. Real-World Examples:
        ->Example 1: Sequential API Calls:
            async function getOrderDetails()
            {
                try
                {
                    //First API call
                    const order = await fetch('https://api.shop.com/order/123');
                    const orderData = await order.json();
                    //Second API call using data from first
                    const user = await fetch(`https://api.shop.com/user/${orderData.userId}`);
                    const userData = await user.json();
                    return
                    {
                        order: orderData,
                        user: userData
                    };
                }catch(error)
                {
                    console.error('Failed to fetch order details:', error);
                }
            }

        ->Example 2: Parallel API Calls:
            async function getMultipleUsers()
            {
                try
                {
                    //Run API calls in parallel using Promise.all
                    const userPromises = [
                        fetch('https://api.example.com/user/1'),
                        fetch('https://api.example.com/user/2'),
                        fetch('https://api.example.com/user/3')
                    ];
                    const responses = await Promise.all(userPromises);
                    const users = await Promise.all(responses.map(res => res.json()));
                    return users;
                }catch(error)
                {
                    console.error('Failed to fetch users:', error);
                }
            }

    ->5. Error Handling:
        ->Use try/catch blocks for handling errors in async functions.
        ->Errors from any awaited Promise will be caught.

        ->Example:
            async function handleErrors()
            {
                try
                {
                    const data = await fetchDataThatMightFail();
                    console.log(data);
                }catch(error)
                {
                    console.error('An error occurred:', error);
                    //Handle the error appropriately
                }
            }

    ->6. Best Practices:
        1.Always use try/catch blocks for error handling.
        2.Remember that await can only be used in async functions.
        3.Use Promise.all() for parallel operations.
        4.Don't forget to handle Promise rejections.
        5.Consider using Promise.race() when dealing with timeouts.

    ->7. Common Patterns:
        ->Loading Pattern:
            async function fetchWithLoading()
            {
                try
                {
                    //Show loading state
                    showLoading();
                    //Fetch data
                    const result = await fetchData();
                    //Process data
                    return result;
                }catch(error)
                {
                    handleError(error);
                }finally
                    {
                        //Hide loading state
                        hideLoading();
                    }
            }

        ->Timeout Pattern:
            async function fetchWithTimeout(timeoutMs)
            {
                const timeout = new Promise((_, reject) =>
                {
                    setTimeout(() => reject(new Error('Timeout')), timeoutMs);
                });
                try
                {
                    const result = await Promise.race([
                        fetch('https://api.example.com/data'),
                        timeout
                    ]);
                    return await result.json();
                }catch(error)
                {
                    console.error('Request timed out:', error);
                }
            }

    ->8. Important Notes:
        ->async/await is non-blocking - other code can run while awaiting.
        ->async functions always return Promises.
        ->await only works with Promises (or Promise-like objects).
        ->Multiple await statements are executed sequentially unless wrapped in Promise.all().
        ->The await keyword can only be used inside async functions.
        ->async/await makes asynchronous code more readable and maintainable.

    ->9. Comparision with Traditional Promises:
        //Traditional Promise chain
        fetchUser()
            .then(user => fetchProfile(user))
            .then(profile => console.log(profile))
            .catch(error => console.error(error));

        //Same operation with async/await
        async function getUserProfile()
        {
            try
            {
                const user = await fetchUser();
                const profile = await fetchProfile(user);
                console.log(profile);
            }catch(error)
            {
                console.error(error);
            }
        }

-->These notes covers the fundamental concepts and practical applications of async/await in JavaScript.
   Practice and experimentation will help to solidify these concepts.